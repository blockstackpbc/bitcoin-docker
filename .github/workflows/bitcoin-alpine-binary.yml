name: bitcoin-alpine-binary
env:
  IMAGE_NAME: quay.io/blockstack/bitcoind
  CONTEXT: Dockerfiles/bitcoin
  DOCKERFILE: Dockerfiles/bitcoin/Dockerfile.alpine.binary

on:
  push:
    paths:
      - Dockerfiles/bitcoin/Dockerfile.alpine.binary
      - Dockerfiles/bitcoin/make_binary_dist.sh
      - Dockerfiles/bitcoin/VERSION
      - .github/workflows/bitcoin-alpine-binary.yml
  pull_request:
    paths:
      - Dockerfiles/bitcoin/Dockerfile.alpine.binary
      - Dockerfiles/bitcoin/make_binary_dist.sh
      - Dockerfiles/bitcoin/VERSION
      - .github/workflows/bitcoin-alpine-binary.yml

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node: [6, 8, 10]
  #   steps:
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node }}
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    # services:
    #   registry:
    #     image: registry:2
    #     ports:
    #       - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker
          driver-opts: network=host

      - name: Get release version
        id: get_version
        run: echo "RELEASE_VERSION=$(cat ${CONTEXT}/VERSION)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          # load: true
          file: ${{ env.DOCKERFILE }}
          context: ${{ env.CONTEXT }}
          # tags: localhost:5000/bitcoind
          tags: ${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          build-args: BTC_VERSION=${{ env.RELEASE_VERSION }}
          push: false
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Generate Changelog
        run: echo "Bitcoin Core ${{ env.RELEASE_VERSION }}" > ${{ github.workflow }}-CHANGELOG.txt

      - name: Look up images
        run: docker image ls

      - name: Copy Binary to Local
        shell: bash
        run: |
          docker rm -f bitcoin-binary || true
          docker create --name bitcoin-binary ${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          docker cp bitcoin-binary:/srv/build build
          docker rm -f bitcoin-binary

# - name: Archive production artifacts
#   uses: actions/upload-artifact@v2
#   with:
#     name: dist-without-markdown
#     path: |
#       dist
#       !dist/**/*.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Bitcoin Core - ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_VERSION }}
          body_path: ${{ github.workflow }}-CHANGELOG.txt
          files: build/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


####################################################################################
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.RELEASE_VERSION }}
      #     release_name: Bitcoin Core - ${{ env.RELEASE_VERSION }}
      #     draft: false
      #     prerelease: false
      #     # repo: xxx

      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     # upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: /srv/musl-v${{ env.RELEASE_VERSION }}.tar.gz
      #     asset_name: musl-${{ env.RELEASE_VERSION }}.tar.gz
      #     asset_content_type: application/zip
